#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw[min max sum];

# === Fan control script for IBM x3550 M3 ===
# Controls fans via IPMI based on CPU and RAM temperatures
# Fan Bank 1: based on average temperature of CPU1 (coretemp-isa-0000)
# Fan Bank 2: based on RAM temperature (intel5500-pci-.*temp1)
# Fan Bank 3: based on average temperature of CPU2 (coretemp-isa-0001)
# On startup, sets fans to 100% for $seconds_to_sleep seconds, then reverts to temperature-based control
# Optimized for minimal noise with low fan speeds for safe temperatures

# === Configuration ===
my $hostname = `hostname`;
chomp($hostname);

my $number_of_fanbanks = 3;          # Total number of fan banks
my $min_temp_change    = 1;          # Minimum temperature change to update fan speed
my $seconds_to_sleep   = 5;          # Interval for checking temperatures and initial max speed duration (seconds)

my $ipmi_preamble = "ipmitool";      # Local IPMI command, no authentication needed

# Temperature thresholds and corresponding fan speeds (%) for quiet operation
my %temp_to_fan_speed = (
    80 => 100,  # Critical threshold, max cooling
    70 => 60,   # Moderate cooling
    60 => 30,   # Balanced cooling
    50 => 15,   # Quiet operation
    40 => 10,   # Minimal noise for safe temperatures
);

my %temp_scale;

# Global variables
my @g_current_fan_duty_cycle = (0, 0, 0); # Fan speeds for banks 1, 2, 3
my @g_current_temps = (0, 0, 0);         # Average temperatures for CPU1, RAM, CPU2
my @g_last_set_temps = (0, 0, 0);        # Last set temperatures for CPU1, RAM, CPU2

# Set locale to ensure consistent number formatting
$ENV{LC_ALL} = 'C';

# Switch server to manual fan control mode
sub SetManualFanMode {
    print "Switching server to manual fan control mode...\n";
    `$ipmi_preamble raw 0x3a 0x01 0x00 > /dev/null 2>&1`;
}

# Set fan speed for a specific bank
sub Internal_DoSetFanSpeed {
    my ($bank, $fan_speed) = @_;
    my $hex_bank  = sprintf("0x%02x", $bank);
    my $hex_speed = sprintf("0x%02x", $fan_speed);

    print "Setting FanBank #$bank ($hex_bank) to $fan_speed%\n";
    `$ipmi_preamble raw 0x3a 0x07 $hex_bank $hex_speed 0x01 > /dev/null 2>&1`;
}

# Update fan speed for a specific bank
sub SetFanSpeed {
    my ($bank, $fan_speed, $temp, $index) = @_;

    # Ensure minimum fan speed (hardware-dependent, 10% assumed supported)
    $fan_speed = 10 if $fan_speed < 10;

    my $temp_diff = abs($temp - $g_last_set_temps[$index]);
    if ($temp_diff >= $min_temp_change) {
        print "\n";
        print "*********************************************************\n";
        print "Updating fan speed for bank $bank\n";
        print "Temperature change: $temp_diff °C\n";
        print "Current temperature: $temp °C\n";
        print "Desired fan speed: $fan_speed%\n";
        print "*********************************************************\n";

        $g_last_set_temps[$index] = $temp;
        $g_current_fan_duty_cycle[$bank - 1] = $fan_speed;

        Internal_DoSetFanSpeed($bank, $fan_speed);
    }
}

# Retrieve CPU and RAM temperatures from sensors
sub GetTemps {
    my ($cpu1_temps, $cpu2_temps, $ram_temp) = ([], [], 0);
    my $current_cpu = '';

    my $sensors_output = `sensors`;
    foreach my $line (split(/\n/, $sensors_output)) {
        if ($line =~ /coretemp-isa-0000/) {
            $current_cpu = 'cpu1';
            next;
        } elsif ($line =~ /coretemp-isa-0001/) {
            $current_cpu = 'cpu2';
            next;
        } elsif ($line =~ /intel5500-pci-.*temp1:\s+\+(\d+\.\d)\s*C/) {
            $ram_temp = $1;
            next;
        }
        # Match CPU temperature lines (e.g., "Core 0:       +38.0 C")
        if ($line =~ /Core \d+:\s+\+(\d+\.\d)\s*C/) {
            my $temp = $1;
            if ($current_cpu eq 'cpu1') {
                push @$cpu1_temps, $temp;
            } elsif ($current_cpu eq 'cpu2') {
                push @$cpu2_temps, $temp;
            }
        }
    }

    # Calculate average temperatures
    my $cpu1_avg = @$cpu1_temps ? sprintf("%.1f", (sum(@$cpu1_temps) / @$cpu1_temps)) : 0;
    my $cpu2_avg = @$cpu2_temps ? sprintf("%.1f", (sum(@$cpu2_temps) / @$cpu2_temps)) : 0;
    my $ram_avg = $ram_temp || 0;

    # Log warning if RAM temperature is not detected
    if ($ram_avg == 0) {
        print "WARNING: RAM temperature not detected, check sensor name in 'sensors' output\n";
    }

    return ($cpu1_avg, $ram_avg, $cpu2_avg);
}

# Sum array elements
sub sum {
    my @arr = @_;
    my $total = 0;
    $total += $_ for @arr;
    return $total;
}

# Calculate fan speed scalars for smooth transitions
sub CalculateScalars {
    my @previous = ();
    foreach my $a (sort keys %temp_to_fan_speed) {
        my @current = ($a, $temp_to_fan_speed{$a});
        if (@previous) {
            my $m = ($current[1] - $previous[1]) / ($current[0] - $previous[0]);
            my $b = $current[1] - ($m * $current[0]);
            $temp_scale{$a} = [ $m, $b ];
        }
        @previous = @current;
    }
}

# Update fan speeds based on current temperatures
sub UpdateFanSpeed {
    my ($cpu1_temp, $ram_temp, $cpu2_temp) = GetTemps();

    $g_current_temps[0] = $cpu1_temp;
    $g_current_temps[1] = $ram_temp;
    $g_current_temps[2] = $cpu2_temp;

    print "    CPU1: $cpu1_temp °C\n";
    print "    RAM: $ram_temp °C\n";
    print "    CPU2: $cpu2_temp °C\n";

    # Calculate fan speeds for each bank
    my @desired_fan_speeds = (0, 0, 0);
    my @temps = ($cpu1_temp, $ram_temp, $cpu2_temp);

    for my $bank (1..3) {
        my $temp = $temps[$bank - 1];
        my $calculated_speed = 10; # Default minimum speed for quiet operation

        foreach my $a (reverse sort keys %temp_scale) {
            if ($temp <= $a) {
                my @formula = @{$temp_scale{$a}};
                $calculated_speed = ($formula[0] * $temp) + $formula[1];
                $calculated_speed = 10 if $calculated_speed < 10; # Ensure minimum speed
                $desired_fan_speeds[$bank - 1] = sprintf("%.0f", $calculated_speed);
                last;
            }
        }

        print "     Current speed (bank $bank): $g_current_fan_duty_cycle[$bank-1]%\n";
        print "     Desired speed (bank $bank): $desired_fan_speeds[$bank-1]%\n";

        # Save metrics for Telegraf/InfluxDB
        open(my $fh, '>>', '/tmp/fan_speed_telegraf') or die "Cannot open file: $!";
        print $fh "fans,host=$hostname,bank=$bank speed_percent=$desired_fan_speeds[$bank-1]\n";
        print $fh "fans,host=$hostname,bank=$bank speed_raw=0x" . sprintf("%x", $desired_fan_speeds[$bank-1]) . "\n";
        close($fh);
    }

    # Save temperatures
    open(my $fh, '>>', '/tmp/fan_speed_telegraf') or die "Cannot open file: $!";
    print $fh "temperature,host=$hostname cpu1_temp_c=$cpu1_temp\n";
    print $fh "temperature,host=$hostname ram_temp_c=$ram_temp\n";
    print $fh "temperature,host=$hostname cpu2_temp_c=$cpu2_temp\n";
    close($fh);

    # Set fan speeds for each bank
    SetFanSpeed(1, $desired_fan_speeds[0], $cpu1_temp, 0);
    SetFanSpeed(2, $desired_fan_speeds[1], $ram_temp, 1);
    SetFanSpeed(3, $desired_fan_speeds[2], $cpu2_temp, 2);
}

# === Main loop ===
print "Starting fan control script for IBM x3550 M3...\n";
SetManualFanMode();

# Set all fans to 100% for $seconds_to_sleep seconds at startup
print "Setting all fans to 100% for $seconds_to_sleep seconds...\n";
for my $bank (1..$number_of_fanbanks) {
    Internal_DoSetFanSpeed($bank, 100);
}
sleep $seconds_to_sleep;
print "Reverting to temperature-based fan control...\n";

CalculateScalars();

while (1) {
    print "\n";
    print "=================================================================\n";
    print "Calling UpdateFanSpeed()...\n";
    print "=================================================================\n";
    UpdateFanSpeed();
    print "=================================================================\n";
    print "Waiting $seconds_to_sleep seconds...\n";
    print "=================================================================\n";

    sleep $seconds_to_sleep;
}
